package by.aurorasoft.chart.model.chart.format.formatter;

import by.aurorasoft.chart.model.chart.format.formatter.exception.ScreeningChartException;
import org.icepear.echarts.Chart;
import org.icepear.echarts.render.Engine;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;

import java.io.File;
import java.io.IOException;

import static java.lang.System.nanoTime;
import static java.nio.charset.StandardCharsets.UTF_8;
import static org.apache.commons.io.FileUtils.delete;
import static org.apache.commons.io.FileUtils.writeStringToFile;
import static org.openqa.selenium.OutputType.BYTES;

/**
 * Formats chart to image's bytes by saving html of this chart in temp file, opening it in browser and screening it.
 * In the end this html file will be removed.
 * Name's of temp files generated by current nanoseconds, because of file's names should be unique to
 * format in parallel.
 */
public final class ChartToImageFormatter implements ChartFormatter {
    private static final String TEMPLATE_PATH_NAME_TEMP_FILE = "temp-%d.html";
    private static final String ARGUMENT_CHROME_OPTIONS_TO_HIDE_OPENING_BROWSER = "--headless";

    @Override
    public byte[] format(Chart<?, ?> chart, Engine engine) {
        return screenChart(chart, engine);
    }

    private static byte[] screenChart(Chart<?, ?> chart, Engine engine) {
        try {
            final File tempFile = writeChartIntoTempFile(chart, engine);
            try {
                return screenChart(tempFile);
            } finally {
                delete(tempFile);
            }
        } catch (final IOException cause) {
            throw new ScreeningChartException(cause);
        }
    }

    private static File writeChartIntoTempFile(Chart<?, ?> chart, Engine engine)
            throws IOException {
        final String chartHtml = engine.renderHtml(chart);
        final File tempFile = createTempFile();
        writeStringToFile(tempFile, chartHtml, UTF_8);
        return tempFile;
    }

    private static File createTempFile() {
        final String pathName = generatePathNameOfTempFile();
        return new File(pathName);
    }

    private static String generatePathNameOfTempFile() {
        return String.format(TEMPLATE_PATH_NAME_TEMP_FILE, nanoTime());
    }

    private static byte[] screenChart(File file) {
        final WebDriver driver = createWebDriver();
        try {
            driver.get(file.toURI().toString());
            return ((TakesScreenshot) driver).getScreenshotAs(BYTES);
        } finally {
            driver.quit();
        }
    }

    private static WebDriver createWebDriver() {
        final ChromeOptions chromeOptions = new ChromeOptions()
                .addArguments(ARGUMENT_CHROME_OPTIONS_TO_HIDE_OPENING_BROWSER);
        return new ChromeDriver(chromeOptions);
    }
}
